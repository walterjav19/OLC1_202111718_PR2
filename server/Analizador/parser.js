/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,26],$V4=[1,20],$V5=[1,21],$V6=[1,19],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,27],$Vc=[1,29],$Vd=[1,28],$Ve=[2,5,20,22,23,32,38,41,47,50,54,56,60,64,66,67,70],$Vf=[1,63],$Vg=[1,49],$Vh=[1,64],$Vi=[1,65],$Vj=[1,66],$Vk=[1,67],$Vl=[1,68],$Vm=[1,69],$Vn=[1,56],$Vo=[1,62],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,57],$Vw=[1,60],$Vx=[1,61],$Vy=[1,88],$Vz=[1,86],$VA=[1,87],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[8,22,27,30,36,45,65,69,87,88,89,90,91,92,93,94,95,96,97,98],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,123],$VX=[1,127],$VY=[2,46],$VZ=[8,22,27,30,36,65,69,91,92],$V_=[25,26,28,29,31,32,33,35,39,44,80,81,82,83,84,85,86,88,99],$V$=[8,30],$V01=[8,27,30,49],$V11=[8,22,27,30,36,65,69,87,88,91,92,93,94,95,96,97,98],$V21=[8,22,27,30,36,65,69,91,92,93,94,95,96,97,98],$V31=[1,186],$V41=[27,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"print_instruccion":7,"PYC":8,"begin_end":9,"declare":10,"assigment":11,"select":12,"create":13,"alter":14,"insert":15,"truncate":16,"if":17,"while":18,"for":19,"PRINT":20,"expresion":21,"BEGIN":22,"END":23,"nativas":24,"LOWER":25,"PARIZQ":26,"PARDER":27,"UPPER":28,"ROUND":29,"COMA":30,"LEN":31,"TRUNCATE":32,"TYPEOF":33,"cast":34,"CAST":35,"AS":36,"tipo":37,"SET":38,"VARIABLE":39,"IGUAL":40,"SELECT":41,"listaid":42,"FROM":43,"ID":44,"POR":45,"WHERE":46,"DECLARE":47,"listavariable":48,"DEFAULT":49,"CREATE":50,"TABLE":51,"listacolumnas":52,"columna":53,"ALTER":54,"ADD":55,"DROP":56,"COLUMN":57,"RENAME":58,"TO":59,"INSERT":60,"INTO":61,"VALUES":62,"listaexpresion":63,"IF":64,"THEN":65,"ELSE":66,"FOR":67,"IN":68,"RANGO":69,"WHILE":70,"INT":71,"DOUBLE":72,"DATE":73,"VARCHAR":74,"BOOLEAN":75,"symbols":76,"unario":77,"aritmetica":78,"logica":79,"DECIMAL":80,"ENTERO":81,"CADENA":82,"TRUE":83,"FALSE":84,"FECHA":85,"NULL":86,"MAS":87,"MENOS":88,"DIV":89,"MOD":90,"OR":91,"AND":92,"EQUALS":93,"NOTEQUALS":94,"MAYOR":95,"MENOR":96,"MAYORIGUAL":97,"MENORIGUAL":98,"NOT":99,"operadores":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",20:"PRINT",22:"BEGIN",23:"END",25:"LOWER",26:"PARIZQ",27:"PARDER",28:"UPPER",29:"ROUND",30:"COMA",31:"LEN",32:"TRUNCATE",33:"TYPEOF",35:"CAST",36:"AS",38:"SET",39:"VARIABLE",40:"IGUAL",41:"SELECT",43:"FROM",44:"ID",45:"POR",46:"WHERE",47:"DECLARE",49:"DEFAULT",50:"CREATE",51:"TABLE",54:"ALTER",55:"ADD",56:"DROP",57:"COLUMN",58:"RENAME",59:"TO",60:"INSERT",61:"INTO",62:"VALUES",64:"IF",65:"THEN",66:"ELSE",67:"FOR",68:"IN",69:"RANGO",70:"WHILE",71:"INT",72:"DOUBLE",73:"DATE",74:"VARCHAR",75:"BOOLEAN",80:"DECIMAL",81:"ENTERO",82:"CADENA",83:"TRUE",84:"FALSE",85:"FECHA",86:"NULL",87:"MAS",88:"MENOS",89:"DIV",90:"MOD",91:"OR",92:"AND",93:"EQUALS",94:"NOTEQUALS",95:"MAYOR",96:"MENOR",97:"MAYORIGUAL",98:"MENORIGUAL",99:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[9,3],[24,4],[24,4],[24,6],[24,4],[24,6],[24,4],[34,6],[11,4],[12,2],[12,4],[12,4],[12,4],[12,6],[10,2],[10,5],[13,6],[16,3],[52,3],[52,1],[53,2],[14,6],[14,6],[14,6],[14,8],[14,3],[15,10],[42,3],[42,1],[63,3],[63,1],[48,4],[48,2],[17,6],[17,8],[19,9],[18,5],[37,1],[37,1],[37,1],[37,1],[37,1],[21,1],[21,1],[21,1],[21,1],[21,3],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[78,3],[78,3],[78,3],[78,3],[78,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[77,2],[77,2],[77,3],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 37: case 46: case 48:
this.$=[]; this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15:
this.$=$$[$0-1];
break;
case 16:

         Lista_Errores.push(new Error("Sintactico", `componente ${yytext} `, this._$.first_line,this._$.first_column));
        ConsolaSalida.push('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column)
break;
case 17:
this.$=new Print($$[$0]);
break;
case 18:
this.$=new BeginEnd($$[$0-1]);
break;
case 19:
this.$=new Lower($$[$0-1]);
break;
case 20:
this.$=new Upper($$[$0-1]);
break;
case 21:
this.$=new Round($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
break;
case 22:
this.$=new Len($$[$0-1]);
break;
case 23:
this.$=new Truncate($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
break;
case 24:
this.$=new Typeof($$[$0-1]);
break;
case 25:
this.$=new Cast($$[$0-3],$$[$0-1]);
break;
case 26:
this.$=new Assigment($$[$0-2],$$[$0]);
break;
case 27:
this.$=new Select($$[$0]);
break;
case 28:
this.$=new SelectColumn($$[$0-2],$$[$0]);
break;
case 29:
this.$=new SelectTable($$[$0]);
break;
case 30:
this.$=new SelectAs($$[$0-2],$$[$0]);
break;
case 31:
this.$=new SelectWhere($$[$0-4],$$[$0-2],$$[$0],condicion);condicion=[];
break;
case 32:
this.$=new ListDeclaration($$[$0]);
break;
case 33:
this.$=new Declaration($$[$0-3],$$[$0],$$[$0-2]);
break;
case 34:
this.$=new Create($$[$0-3],$$[$0-1]);
break;
case 35:
this.$=new TruncateTable($$[$0]);
break;
case 36: case 45: case 47:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 38:
this.$=new Columna($$[$0-1],$$[$0]);
break;
case 39:
this.$=new Add($$[$0-3],$$[$0-1],$$[$0]);
break;
case 40:
this.$=new DropColumn($$[$0-3],$$[$0]);
break;
case 41:
this.$=new Rename($$[$0-3],$$[$0]);
break;
case 42:
this.$=new RenameColumn($$[$0-5],$$[$0-2],$$[$0]);
break;
case 43:
this.$=new DropTable($$[$0]);
break;
case 44:
this.$=new Insert($$[$0-7],$$[$0-5],$$[$0-1]);
break;
case 49:
this.$=$$[$0-3]; this.$.push(new Declaration($$[$0-1],new Dato($$[$0-3],'NULL', this._$.first_line, this._$.first_column),$$[$0]));
break;
case 50:
this.$=[]; this.$.push(new Declaration($$[$0-1],new Dato($$[$0-1],'NULL', this._$.first_line, this._$.first_column),$$[$0]));
break;
case 51:
this.$=new If($$[$0-4],$$[$0-2]);
break;
case 52:
this.$=new IfElse($$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 53:
this.$=new For($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 54:
this.$=new While($$[$0-3],$$[$0-1]);
break;
case 55: case 56: case 57: case 58: case 59: case 91: case 92: case 93: case 94: case 95: case 96:
this.$=$$[$0];
break;
case 60: case 61: case 62: case 63: case 73: case 74:
this.$=$$[$0]
break;
case 64:
this.$=$$[$0-1]
break;
case 65:
this.$ = new Dato($$[$0],'DOUBLE', this._$.first_line, this._$.first_column)
break;
case 66:
this.$ = new Dato($$[$0],'INT', this._$.first_line, this._$.first_column)
break;
case 67:
this.$ = new Dato($$[$0],'VARCHAR', this._$.first_line, this._$.first_column)
break;
case 68: case 69:
this.$ = new Dato($$[$0],'BOOLEAN', this._$.first_line, this._$.first_column)
break;
case 70:
this.$ = new Dato($$[$0],'DATE', this._$.first_line, this._$.first_column);
break;
case 71:
this.$=  new Access($$[$0], this._$.first_line, this._$.first_column);
break;
case 72:
this.$ = new Dato($$[$0],'NULL', this._$.first_line, this._$.first_column)
break;
case 75:
this.$=new Aritmetica($$[$0-2],'+',$$[$0], this._$.first_line, this._$.first_column);
break;
case 76:
this.$=new Aritmetica($$[$0-2],'-',$$[$0], this._$.first_line, this._$.first_column);
break;
case 77:
this.$=new Aritmetica($$[$0-2],'*',$$[$0], this._$.first_line, this._$.first_column);
break;
case 78:
this.$=new Aritmetica($$[$0-2],'/',$$[$0], this._$.first_line, this._$.first_column);
break;
case 79:
this.$=new Aritmetica($$[$0-2],'%',$$[$0], this._$.first_line, this._$.first_column);
break;
case 80:
this.$=new Logica($$[$0-2],'OR',$$[$0], this._$.first_line, this._$.first_column);
break;
case 81:
this.$=new Logica($$[$0-2],'AND',$$[$0], this._$.first_line, this._$.first_column);
break;
case 82:
this.$=new Logica($$[$0-2],'==',$$[$0], this._$.first_line, this._$.first_column);
break;
case 83:
this.$=new Logica($$[$0-2],'!=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 84:
this.$=new Logica($$[$0-2],'>',$$[$0], this._$.first_line, this._$.first_column);
break;
case 85:
this.$=new Logica($$[$0-2],'<',$$[$0], this._$.first_line, this._$.first_column);
break;
case 86:
this.$=new Logica($$[$0-2],'>=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 87:
this.$=new Logica($$[$0-2],'<=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 88:
this.$=new Aritmetica($$[$0],'-',null, this._$.first_line, this._$.first_column);
break;
case 89:
this.$=new Logica($$[$0],'NOT',null, this._$.first_line, this._$.first_column);
break;
case 90:
let c=new Condicion($$[$0-2],$$[$0-1],$$[$0]);condicion.push(c);this.$=c;
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{1:[3]},{2:$V0,5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},o($Ve,[2,3]),{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,43]},o($Ve,[2,16]),{21:44,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{2:$V0,4:70,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{39:[1,72],48:71},{39:[1,73]},{21:74,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,42:75,44:[1,77],45:[1,76],76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{51:[1,78]},{51:[1,79]},{51:[1,80]},{61:[1,81]},{51:[1,82]},{21:83,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:84,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{44:[1,85]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),{8:[2,17],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),{21:99,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,69]),o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),{21:100,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:101,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{40:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,100:102},{26:[1,109]},{26:[1,110]},{26:[1,111]},{26:[1,112]},{26:[1,113]},{26:[1,114]},{26:[1,115]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,23:[1,116],32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{8:[2,32],30:[1,117]},{37:118,71:$VS,72:$VT,73:$VU,74:$VV,75:$VW},{40:[1,124]},{8:[2,27],36:[1,125],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{30:$VX,43:[1,126]},{43:[1,128]},o([30,43],$VY,{100:102,40:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR}),{44:[1,129]},{44:[1,130]},{44:[1,131]},{44:[1,132]},{44:[1,133]},{45:$Vy,65:[1,134],87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{22:[1,135],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{68:[1,136]},{21:137,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:138,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:139,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:140,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:141,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:142,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:143,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:144,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:145,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:146,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:147,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:148,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:149,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{27:[1,150],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},o($VL,[2,88]),o($VZ,[2,89],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),{21:151,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($V_,[2,91]),o($V_,[2,92]),o($V_,[2,93]),o($V_,[2,94]),o($V_,[2,95]),o($V_,[2,96]),{21:152,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:153,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:154,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:155,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:156,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:157,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{21:158,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{8:[2,18]},{39:[1,159]},o($V$,[2,50],{49:[1,160]}),o($V01,[2,55]),o($V01,[2,56]),o($V01,[2,57]),o($V01,[2,58]),o($V01,[2,59]),{21:161,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{44:[1,162]},{44:[1,163]},{44:[1,164]},{44:[1,165]},{26:[1,166]},{55:[1,167],56:[1,168],58:[1,169]},{8:[2,43]},{26:[1,170]},{8:[2,35]},{2:$V0,4:171,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{2:$V0,4:172,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{21:173,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($V11,[2,75],{45:$Vy,89:$VB,90:$VC}),o($V11,[2,76],{45:$Vy,89:$VB,90:$VC}),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o([8,22,27,30,36,65,69,91],[2,80],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($VZ,[2,81],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($V21,[2,82],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($V21,[2,83],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($V21,[2,84],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($V21,[2,85],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($V21,[2,86],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($V21,[2,87],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC}),o($VL,[2,64]),o($VL,[2,90]),{27:[1,174],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,175],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{30:[1,176],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,177],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{30:[1,178],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,179],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{36:[1,180],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{37:181,71:$VS,72:$VT,73:$VU,74:$VV,75:$VW},{21:182,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{8:[2,26],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{8:[2,30]},{8:[2,28],46:[1,183]},o([27,30,43],[2,45]),{8:[2,29]},{44:$V31,52:184,53:185},{44:[1,187]},{57:[1,188]},{57:[1,190],59:[1,189]},{42:191,44:[1,192]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,23:[1,193],32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,66:[1,194],67:$Vc,70:$Vd},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,23:[1,195],32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{45:$Vy,69:[1,196],87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},o($VL,[2,19]),o($VL,[2,20]),{21:197,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($VL,[2,22]),{21:198,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($VL,[2,24]),{37:199,71:$VS,72:$VT,73:$VU,74:$VV,75:$VW},o($V$,[2,49]),{8:[2,33],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{21:200,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{27:[1,201],30:[1,202]},o($V41,[2,37]),{37:203,71:$VS,72:$VT,73:$VU,74:$VV,75:$VW},{37:204,71:$VS,72:$VT,73:$VU,74:$VV,75:$VW},{44:[1,205]},{44:[1,206]},{44:[1,207]},{27:[1,208],30:$VX},o($V41,$VY),{64:[1,209]},{2:$V0,4:210,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{8:[2,54]},{21:211,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{27:[1,212],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,213],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,214]},{8:[2,31],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{8:[2,34]},{44:$V31,53:215},o($V41,[2,38]),{8:[2,39]},{8:[2,40]},{8:[2,41]},{59:[1,216]},{62:[1,217]},{8:[2,51]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,23:[1,218],32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{22:[1,219],45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},o($VL,[2,21]),o($VL,[2,23]),o($VL,[2,25]),o($V41,[2,36]),{44:[1,220]},{26:[1,221]},{64:[1,222]},{2:$V0,4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{8:[2,42]},{21:225,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,63:224,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},{8:[2,52]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:$V2,23:[1,226],32:$V3,38:$V4,41:$V5,47:$V6,50:$V7,54:$V8,56:$V9,60:$Va,64:$Vb,67:$Vc,70:$Vd},{27:[1,227],30:[1,228]},o($V41,[2,48],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),{8:[2,53]},{8:[2,44]},{21:229,24:58,25:$Vf,26:$Vg,28:$Vh,29:$Vi,31:$Vj,32:$Vk,33:$Vl,34:59,35:$Vm,39:$Vn,44:$Vo,76:45,77:46,78:47,79:48,80:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu,86:$Vv,88:$Vw,99:$Vx},o($V41,[2,47],{45:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK})],
defaultActions: {30:[2,1],116:[2,18],131:[2,43],133:[2,35],162:[2,30],165:[2,29],195:[2,54],201:[2,34],204:[2,39],205:[2,40],206:[2,41],209:[2,51],220:[2,42],222:[2,52],226:[2,53],227:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const Dato = require('../interprete/expresiones/Dato.js');
const Print = require('../interprete/instrucciones/Print.js');
const Aritmetica = require('../interprete/expresiones/Aritmetica.js');
const Logica = require('../interprete/expresiones/Logica.js');
const Access = require('../interprete/expresiones/Access.js');
const BeginEnd= require('../interprete/instrucciones/BeginEnd.js');
const Declaration= require('../interprete/instrucciones/Declaration.js');
const Assigment= require('../interprete/expresiones/Assigment.js');
const ListDeclaration= require('../interprete/instrucciones/ListDeclaration.js');
const Token= require('../interprete/Estructuras/Tokens.js');
const Lista_Tokens= require('../interprete/Estructuras/ListaTokens.js')
const ConsolaSalida= require('../interprete/Estructuras/ConsoleOut.js')
const Lista_Errores= require('../interprete/Estructuras/ListaErrores.js')
const Error= require('../interprete/Estructuras/Errores.js')
const Select= require('../interprete/instrucciones/Select.js')
const Lower= require('../interprete/instrucciones/Lower.js');
const Upper= require('../interprete/instrucciones/Upper.js');
const Round= require('../interprete/instrucciones/Round.js');
const Len= require('../interprete/instrucciones/Length.js');
const Truncate= require('../interprete/instrucciones/Truncate.js');
const Typeof= require('../interprete/instrucciones/Typeof.js');
const Columna=require('../interprete/Estructuras/Columna.js');
const Create=require('../interprete/expresiones/Create.js');
const Add=require('../interprete/expresiones/Add.js');
const DropColumn=require('../interprete/expresiones/DropColumn.js');
const Rename=require('../interprete/expresiones/Rename.js');
const RenameColumn=require('../interprete/expresiones/RenameColumn.js');
const DropTable=require('../interprete/expresiones/DropTable.js');
const Insert=require('../interprete/expresiones/Insert.js');
const SelectColumn=require('../interprete/instrucciones/SelectColumn.js');
const SelectTable=require('../interprete/instrucciones/SelectTable.js');
const SelectAs=require('../interprete/instrucciones/SelectAs.js');
const TruncateTable=require('../interprete/instrucciones/TruncateTable.js');
const SelectWhere=require('../interprete/instrucciones/SelectWhere.js');
const If=require('../interprete/instrucciones/If.js');
const IfElse=require('../interprete/instrucciones/IfElse.js');
const While=require('../interprete/instrucciones/while.js');
const Cast=require('../interprete/instrucciones/Cast.js');
const Condicion=require('../interprete/expresiones/condicion.js');
const For=require('../interprete/instrucciones/For.js');
let condicion=[];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*no se hace nada*/
break;
case 1:/*no se hace nada*/
break;
case 2:Lista_Tokens.push(new Token("FECHA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 85;
break;
case 3:Lista_Tokens.push(new Token("VARIABLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 39;
break;
case 4:Lista_Tokens.push(new Token("PARIZQ", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
             return 26
break;
case 5:Lista_Tokens.push(new Token("PARDER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 27
break;
case 6:Lista_Tokens.push(new Token("PYC", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 8
break;
case 7:Lista_Tokens.push(new Token("COMA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 30
break;
case 8:Lista_Tokens.push(new Token("MAS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 87
break;
case 9:Lista_Tokens.push(new Token("MENOS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 88
break;
case 10:  Lista_Tokens.push(new Token("POR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 45
break;
case 11:  Lista_Tokens.push(new Token("DIV", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 89
break;
case 12:  Lista_Tokens.push(new Token("MOD", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 90
break;
case 13:  Lista_Tokens.push(new Token("PRINT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 20
break;
case 14:  Lista_Tokens.push(new Token("TRUE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 83
break;
case 15:  Lista_Tokens.push(new Token("FALSE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 84
break;
case 16:  Lista_Tokens.push(new Token("NULL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 86
break;
case 17:  Lista_Tokens.push(new Token("EQUALS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 93
break;
case 18:  Lista_Tokens.push(new Token("NOTEQUALS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 94
break;
case 19:  Lista_Tokens.push(new Token("MAYORIGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 97
break;
case 20:  Lista_Tokens.push(new Token("MENORIGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 98
break;
case 21:  Lista_Tokens.push(new Token("MAYOR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 95
break;
case 22:  Lista_Tokens.push(new Token("MENOR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 96
break;
case 23:  Lista_Tokens.push(new Token("IGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 40
break;
case 24:  Lista_Tokens.push(new Token("NOT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 99
break;
case 25:  Lista_Tokens.push(new Token("OR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 91
break;
case 26:  Lista_Tokens.push(new Token("AND", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 92
break;
case 27:  Lista_Tokens.push(new Token("INT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 71
break;
case 28:  Lista_Tokens.push(new Token("DOUBLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 72
break;
case 29:  Lista_Tokens.push(new Token("DATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 73
break;
case 30:  Lista_Tokens.push(new Token("VARCHAR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 74
break;
case 31:  Lista_Tokens.push(new Token("BOOLEAN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 75
break;
case 32:  Lista_Tokens.push(new Token("BEGIN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 22
break;
case 33:  Lista_Tokens.push(new Token("END", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 23
break;
case 34:  Lista_Tokens.push(new Token("LOWER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 25
break;
case 35:  Lista_Tokens.push(new Token("DECLARE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 47
break;
case 36:  Lista_Tokens.push(new Token("SET", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 38
break;
case 37:  Lista_Tokens.push(new Token("DEFAULT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 49
break;
case 38:  Lista_Tokens.push(new Token("SELECT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 41
break;
case 39:  Lista_Tokens.push(new Token("UPPER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 28
break;
case 40:  Lista_Tokens.push(new Token("ROUND", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 29
break;
case 41:Lista_Tokens.push(new Token("LEN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 31
break;
case 42:Lista_Tokens.push(new Token("TRUNCATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 32
break;
case 43:Lista_Tokens.push(new Token("TYPEOF", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 33
break;
case 44:Lista_Tokens.push(new Token("CREATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 50
break;
case 45:Lista_Tokens.push(new Token("TABLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 51
break;
case 46:Lista_Tokens.push(new Token("ALTER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 54
break;
case 47:Lista_Tokens.push(new Token("ADD", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 55
break;
case 48:Lista_Tokens.push(new Token("DROP", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 56
break;
case 49:Lista_Tokens.push(new Token("COLUMN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 57
break;
case 50:Lista_Tokens.push(new Token("RENAME", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 58
break;
case 51:Lista_Tokens.push(new Token("TO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 59
break;
case 52:Lista_Tokens.push(new Token("INSERT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 60
break;
case 53:Lista_Tokens.push(new Token("INTO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 61
break;
case 54:Lista_Tokens.push(new Token("VALUES", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 62
break;
case 55:Lista_Tokens.push(new Token("FROM", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 43
break;
case 56:Lista_Tokens.push(new Token("AS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 36
break;
case 57:Lista_Tokens.push(new Token("WHERE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 46
break;
case 58:Lista_Tokens.push(new Token("IF", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 64
break;
case 59:Lista_Tokens.push(new Token("THEN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 65
break;
case 60:Lista_Tokens.push(new Token("ELSE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 66
break;
case 61:Lista_Tokens.push(new Token("WHILE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 70
break;
case 62:Lista_Tokens.push(new Token("CAST", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 35
break;
case 63:Lista_Tokens.push(new Token("FOR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 67
break;
case 64:Lista_Tokens.push(new Token("IN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 68
break;
case 65:Lista_Tokens.push(new Token("RANGO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 69
break;
case 66:Lista_Tokens.push(new Token("CADENA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 82; 
break;
case 67: Lista_Tokens.push(new Token("DECIMAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 80; 
break;
case 68: Lista_Tokens.push(new Token("ENTERO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 81; 
break;
case 69:Lista_Tokens.push(new Token("ID", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 44;
break;
case 70:/* Espacios se ignoran */
break;
case 71:return 5;
break;
case 72: Lista_Errores.push(new Error("Lexico", "Carater no reconocido "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    ConsolaSalida.push('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column)  
break;
}
},
rules: [/^(?:(--.*))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:(("[0-9]{4}-([0][1-9]|[1][0-2])-([0-2][0-9]|[3][0-1])")|('[0-9]{4}-([0][1-9]|[1][0-2])-([0-2][0-9]|[3][0-1])')))/i,/^(?:((@[a-zA-Z_][a-zA-Z0-9_]*)))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:not\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:LOWER\b)/i,/^(?:DECLARE\b)/i,/^(?:SET\b)/i,/^(?:DEFAULT\b)/i,/^(?:SELECT\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:FROM\b)/i,/^(?:AS\b)/i,/^(?:WHERE\b)/i,/^(?:IF\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:WHILE\b)/i,/^(?:CAST\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:\.\.)/i,/^(?:(("(\\.|[^\\"])*")|('(\\.|[^\\'])*')))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_√±√ë]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}