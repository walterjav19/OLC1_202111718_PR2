/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,25],$V4=[1,19],$V5=[1,20],$V6=[1,18],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[2,5,19,21,22,31,37,40,46,49,53,55,59,63,65,66],$Ve=[1,60],$Vf=[1,46],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[1,66],$Vm=[1,53],$Vn=[1,59],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,54],$Vv=[1,57],$Vw=[1,58],$Vx=[1,84],$Vy=[1,82],$Vz=[1,83],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[8,21,26,29,35,44,64,83,84,85,86,87,88,89,90,91,92,93,94],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,123],$VX=[2,45],$VY=[8,21,26,29,35,64,87,88],$VZ=[24,25,27,28,30,31,32,34,38,43,76,77,78,79,80,81,82,84,95],$V_=[8,29],$V$=[8,26,29,48],$V01=[8,21,26,29,35,64,83,84,87,88,89,90,91,92,93,94],$V11=[8,21,26,29,35,64,87,88,89,90,91,92,93,94],$V21=[1,180],$V31=[26,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"print_instruccion":7,"PYC":8,"begin_end":9,"declare":10,"assigment":11,"select":12,"create":13,"alter":14,"insert":15,"truncate":16,"if":17,"while":18,"PRINT":19,"expresion":20,"BEGIN":21,"END":22,"nativas":23,"LOWER":24,"PARIZQ":25,"PARDER":26,"UPPER":27,"ROUND":28,"COMA":29,"LEN":30,"TRUNCATE":31,"TYPEOF":32,"cast":33,"CAST":34,"AS":35,"tipo":36,"SET":37,"VARIABLE":38,"IGUAL":39,"SELECT":40,"listaid":41,"FROM":42,"ID":43,"POR":44,"WHERE":45,"DECLARE":46,"listavariable":47,"DEFAULT":48,"CREATE":49,"TABLE":50,"listacolumnas":51,"columna":52,"ALTER":53,"ADD":54,"DROP":55,"COLUMN":56,"RENAME":57,"TO":58,"INSERT":59,"INTO":60,"VALUES":61,"listaexpresion":62,"IF":63,"THEN":64,"ELSE":65,"WHILE":66,"INT":67,"DOUBLE":68,"DATE":69,"VARCHAR":70,"BOOLEAN":71,"symbols":72,"unario":73,"aritmetica":74,"logica":75,"DECIMAL":76,"ENTERO":77,"CADENA":78,"TRUE":79,"FALSE":80,"FECHA":81,"NULL":82,"MAS":83,"MENOS":84,"DIV":85,"MOD":86,"OR":87,"AND":88,"EQUALS":89,"NOTEQUALS":90,"MAYOR":91,"MENOR":92,"MAYORIGUAL":93,"MENORIGUAL":94,"NOT":95,"operadores":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",19:"PRINT",21:"BEGIN",22:"END",24:"LOWER",25:"PARIZQ",26:"PARDER",27:"UPPER",28:"ROUND",29:"COMA",30:"LEN",31:"TRUNCATE",32:"TYPEOF",34:"CAST",35:"AS",37:"SET",38:"VARIABLE",39:"IGUAL",40:"SELECT",42:"FROM",43:"ID",44:"POR",45:"WHERE",46:"DECLARE",48:"DEFAULT",49:"CREATE",50:"TABLE",53:"ALTER",54:"ADD",55:"DROP",56:"COLUMN",57:"RENAME",58:"TO",59:"INSERT",60:"INTO",61:"VALUES",63:"IF",64:"THEN",65:"ELSE",66:"WHILE",67:"INT",68:"DOUBLE",69:"DATE",70:"VARCHAR",71:"BOOLEAN",76:"DECIMAL",77:"ENTERO",78:"CADENA",79:"TRUE",80:"FALSE",81:"FECHA",82:"NULL",83:"MAS",84:"MENOS",85:"DIV",86:"MOD",87:"OR",88:"AND",89:"EQUALS",90:"NOTEQUALS",91:"MAYOR",92:"MENOR",93:"MAYORIGUAL",94:"MENORIGUAL",95:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[9,3],[23,4],[23,4],[23,6],[23,4],[23,6],[23,4],[33,6],[11,4],[12,2],[12,4],[12,4],[12,4],[12,6],[10,2],[10,5],[13,6],[16,3],[51,3],[51,1],[52,2],[14,6],[14,6],[14,6],[14,8],[14,3],[15,10],[41,3],[41,1],[62,3],[62,1],[47,4],[47,2],[17,6],[17,8],[18,5],[36,1],[36,1],[36,1],[36,1],[36,1],[20,1],[20,1],[20,1],[20,1],[20,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[74,3],[74,3],[74,3],[74,3],[74,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[73,2],[73,2],[73,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 36: case 45: case 47:
this.$=[]; this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:
this.$=$$[$0-1];
break;
case 15:

         Lista_Errores.push(new Error("Sintactico", `componente ${yytext} `, this._$.first_line,this._$.first_column));
        ConsolaSalida.push('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column)
break;
case 16:
this.$=new Print($$[$0]);
break;
case 17:
this.$=new BeginEnd($$[$0-1]);
break;
case 18:
this.$=new Lower($$[$0-1]);
break;
case 19:
this.$=new Upper($$[$0-1]);
break;
case 20:
this.$=new Round($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
break;
case 21:
this.$=new Len($$[$0-1]);
break;
case 22:
this.$=new Truncate($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
break;
case 23:
this.$=new Typeof($$[$0-1]);
break;
case 24:
this.$=new Cast($$[$0-3],$$[$0-1]);
break;
case 25:
this.$=new Assigment($$[$0-2],$$[$0]);
break;
case 26:
this.$=new Select($$[$0]);
break;
case 27:
this.$=new SelectColumn($$[$0-2],$$[$0]);
break;
case 28:
this.$=new SelectTable($$[$0]);
break;
case 29:
this.$=new SelectAs($$[$0-2],$$[$0]);
break;
case 30:
console.log($$[$0]);this.$=new SelectWhere($$[$0-4],$$[$0-2],$$[$0]);
break;
case 31:
this.$=new ListDeclaration($$[$0]);
break;
case 32:
this.$=new Declaration($$[$0-3],$$[$0],$$[$0-2]);
break;
case 33:
this.$=new Create($$[$0-3],$$[$0-1]);
break;
case 34:
this.$=new TruncateTable($$[$0]);
break;
case 35: case 44: case 46:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 37:
this.$=new Columna($$[$0-1],$$[$0]);
break;
case 38:
this.$=new Add($$[$0-3],$$[$0-1],$$[$0]);
break;
case 39:
this.$=new DropColumn($$[$0-3],$$[$0]);
break;
case 40:
this.$=new Rename($$[$0-3],$$[$0]);
break;
case 41:
this.$=new RenameColumn($$[$0-5],$$[$0-2],$$[$0]);
break;
case 42:
this.$=new DropTable($$[$0]);
break;
case 43:
this.$=new Insert($$[$0-7],$$[$0-5],$$[$0-1]);
break;
case 48:
this.$=$$[$0-3]; this.$.push(new Declaration($$[$0-1],new Dato($$[$0-3],'NULL', this._$.first_line, this._$.first_column),$$[$0]));
break;
case 49:
this.$=[]; this.$.push(new Declaration($$[$0-1],new Dato($$[$0-1],'NULL', this._$.first_line, this._$.first_column),$$[$0]));
break;
case 50:
this.$=new If($$[$0-4],$$[$0-2]);
break;
case 51:
this.$=new IfElse($$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 52:
this.$=new While($$[$0-3],$$[$0-1]);
break;
case 53: case 54: case 55: case 56: case 57: case 89: case 90: case 91: case 92: case 93: case 94:
this.$=$$[$0];
break;
case 58: case 59: case 60: case 61: case 71: case 72:
this.$=$$[$0]
break;
case 62:
this.$=$$[$0-1]
break;
case 63:
this.$ = new Dato($$[$0],'DOUBLE', this._$.first_line, this._$.first_column)
break;
case 64:
this.$ = new Dato($$[$0],'INT', this._$.first_line, this._$.first_column)
break;
case 65:
this.$ = new Dato($$[$0],'VARCHAR', this._$.first_line, this._$.first_column)
break;
case 66: case 67:
this.$ = new Dato($$[$0],'BOOLEAN', this._$.first_line, this._$.first_column)
break;
case 68:
this.$ = new Dato($$[$0],'DATE', this._$.first_line, this._$.first_column);
break;
case 69:
this.$=  new Access($$[$0], this._$.first_line, this._$.first_column);
break;
case 70:
this.$ = new Dato($$[$0],'NULL', this._$.first_line, this._$.first_column)
break;
case 73:
this.$=new Aritmetica($$[$0-2],'+',$$[$0], this._$.first_line, this._$.first_column);
break;
case 74:
this.$=new Aritmetica($$[$0-2],'-',$$[$0], this._$.first_line, this._$.first_column);
break;
case 75:
this.$=new Aritmetica($$[$0-2],'*',$$[$0], this._$.first_line, this._$.first_column);
break;
case 76:
this.$=new Aritmetica($$[$0-2],'/',$$[$0], this._$.first_line, this._$.first_column);
break;
case 77:
this.$=new Aritmetica($$[$0-2],'%',$$[$0], this._$.first_line, this._$.first_column);
break;
case 78:
this.$=new Logica($$[$0-2],'OR',$$[$0], this._$.first_line, this._$.first_column);
break;
case 79:
this.$=new Logica($$[$0-2],'AND',$$[$0], this._$.first_line, this._$.first_column);
break;
case 80:
this.$=new Logica($$[$0-2],'==',$$[$0], this._$.first_line, this._$.first_column);
break;
case 81:
this.$=new Logica($$[$0-2],'!=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 82:
this.$=new Logica($$[$0-2],'>',$$[$0], this._$.first_line, this._$.first_column);
break;
case 83:
this.$=new Logica($$[$0-2],'<',$$[$0], this._$.first_line, this._$.first_column);
break;
case 84:
this.$=new Logica($$[$0-2],'>=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 85:
this.$=new Logica($$[$0-2],'<=',$$[$0], this._$.first_line, this._$.first_column);
break;
case 86:
this.$=new Aritmetica($$[$0],'-',null, this._$.first_line, this._$.first_column);
break;
case 87:
this.$=new Logica($$[$0],'NOT',null, this._$.first_line, this._$.first_column);
break;
case 88:
this.$=new Condicion($$[$0-2],$$[$0-1],$$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},o($Vd,[2,3]),{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},o($Vd,[2,15]),{20:41,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{2:$V0,4:67,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},{38:[1,69],47:68},{38:[1,70]},{20:71,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,41:72,43:[1,74],44:[1,73],72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{50:[1,75]},{50:[1,76]},{50:[1,77]},{60:[1,78]},{50:[1,79]},{20:80,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:81,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{8:[2,16],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),{20:95,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),o($VK,[2,68]),o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,72]),{20:96,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:97,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{39:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,96:98},{25:[1,105]},{25:[1,106]},{25:[1,107]},{25:[1,108]},{25:[1,109]},{25:[1,110]},{25:[1,111]},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:[1,112],31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},{8:[2,31],29:[1,113]},{36:114,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV},{39:[1,120]},{8:[2,26],35:[1,121],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{29:$VW,42:[1,122]},{42:[1,124]},o([29,42],$VX,{96:98,39:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ}),{43:[1,125]},{43:[1,126]},{43:[1,127]},{43:[1,128]},{43:[1,129]},{44:$Vx,64:[1,130],83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{21:[1,131],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{20:132,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:133,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:134,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:135,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:136,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:137,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:138,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:139,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:140,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:141,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:142,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:143,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:144,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{26:[1,145],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},o($VK,[2,86]),o($VY,[2,87],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ}),{20:146,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},o($VZ,[2,89]),o($VZ,[2,90]),o($VZ,[2,91]),o($VZ,[2,92]),o($VZ,[2,93]),o($VZ,[2,94]),{20:147,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:148,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:149,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:150,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:151,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:152,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{20:153,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{8:[2,17]},{38:[1,154]},o($V_,[2,49],{48:[1,155]}),o($V$,[2,53]),o($V$,[2,54]),o($V$,[2,55]),o($V$,[2,56]),o($V$,[2,57]),{20:156,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{43:[1,157]},{43:[1,158]},{43:[1,159]},{43:[1,160]},{25:[1,161]},{54:[1,162],55:[1,163],57:[1,164]},{8:[2,42]},{25:[1,165]},{8:[2,34]},{2:$V0,4:166,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},{2:$V0,4:167,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},o($V01,[2,73],{44:$Vx,85:$VA,86:$VB}),o($V01,[2,74],{44:$Vx,85:$VA,86:$VB}),o($VK,[2,75]),o($VK,[2,76]),o($VK,[2,77]),o([8,21,26,29,35,64,87],[2,78],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ}),o($VY,[2,79],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ}),o($V11,[2,80],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V11,[2,81],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V11,[2,82],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V11,[2,83],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V11,[2,84],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V11,[2,85],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($VK,[2,62]),o($VK,[2,88]),{26:[1,168],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{26:[1,169],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{29:[1,170],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{26:[1,171],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{29:[1,172],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{26:[1,173],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{35:[1,174],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{36:175,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV},{20:176,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{8:[2,25],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{8:[2,29]},{8:[2,27],45:[1,177]},o([26,29,42],[2,44]),{8:[2,28]},{43:$V21,51:178,52:179},{43:[1,181]},{56:[1,182]},{56:[1,184],58:[1,183]},{41:185,43:[1,186]},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:[1,187],31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,65:[1,188],66:$Vc},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:[1,189],31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},o($VK,[2,18]),o($VK,[2,19]),{20:190,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},o($VK,[2,21]),{20:191,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},o($VK,[2,23]),{36:192,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV},o($V_,[2,48]),{8:[2,32],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{20:193,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{26:[1,194],29:[1,195]},o($V31,[2,36]),{36:196,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV},{36:197,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV},{43:[1,198]},{43:[1,199]},{43:[1,200]},{26:[1,201],29:$VW},o($V31,$VX),{63:[1,202]},{2:$V0,4:203,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},{8:[2,52]},{26:[1,204],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{26:[1,205],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{26:[1,206]},{8:[2,30],44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ},{8:[2,33]},{43:$V21,52:207},o($V31,[2,37]),{8:[2,38]},{8:[2,39]},{8:[2,40]},{58:[1,208]},{61:[1,209]},{8:[2,50]},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:[1,210],31:$V3,37:$V4,40:$V5,46:$V6,49:$V7,53:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc},o($VK,[2,20]),o($VK,[2,22]),o($VK,[2,24]),o($V31,[2,35]),{43:[1,211]},{25:[1,212]},{63:[1,213]},{8:[2,41]},{20:215,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,62:214,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},{8:[2,51]},{26:[1,216],29:[1,217]},o($V31,[2,47],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ}),{8:[2,43]},{20:218,23:55,24:$Ve,25:$Vf,27:$Vg,28:$Vh,30:$Vi,31:$Vj,32:$Vk,33:56,34:$Vl,38:$Vm,43:$Vn,72:42,73:43,74:44,75:45,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,84:$Vv,95:$Vw},o($V31,[2,46],{44:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ})],
defaultActions: {28:[2,1],112:[2,17],127:[2,42],129:[2,34],157:[2,29],160:[2,28],189:[2,52],194:[2,33],197:[2,38],198:[2,39],199:[2,40],202:[2,50],211:[2,41],213:[2,51],216:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const Dato = require('../interprete/expresiones/Dato.js');
const Print = require('../interprete/instrucciones/Print.js');
const Aritmetica = require('../interprete/expresiones/Aritmetica.js');
const Logica = require('../interprete/expresiones/Logica.js');
const Access = require('../interprete/expresiones/Access.js');
const BeginEnd= require('../interprete/instrucciones/BeginEnd.js');
const Declaration= require('../interprete/instrucciones/Declaration.js');
const Assigment= require('../interprete/expresiones/Assigment.js');
const ListDeclaration= require('../interprete/instrucciones/ListDeclaration.js');
const Token= require('../interprete/Estructuras/Tokens.js');
const Lista_Tokens= require('../interprete/Estructuras/ListaTokens.js')
const ConsolaSalida= require('../interprete/Estructuras/ConsoleOut.js')
const Lista_Errores= require('../interprete/Estructuras/ListaErrores.js')
const Error= require('../interprete/Estructuras/Errores.js')
const Select= require('../interprete/instrucciones/Select.js')
const Lower= require('../interprete/instrucciones/Lower.js');
const Upper= require('../interprete/instrucciones/Upper.js');
const Round= require('../interprete/instrucciones/Round.js');
const Len= require('../interprete/instrucciones/Length.js');
const Truncate= require('../interprete/instrucciones/Truncate.js');
const Typeof= require('../interprete/instrucciones/Typeof.js');
const Columna=require('../interprete/Estructuras/Columna.js');
const Create=require('../interprete/expresiones/Create.js');
const Add=require('../interprete/expresiones/Add.js');
const DropColumn=require('../interprete/expresiones/DropColumn.js');
const Rename=require('../interprete/expresiones/Rename.js');
const RenameColumn=require('../interprete/expresiones/RenameColumn.js');
const DropTable=require('../interprete/expresiones/DropTable.js');
const Insert=require('../interprete/expresiones/Insert.js');
const SelectColumn=require('../interprete/instrucciones/SelectColumn.js');
const SelectTable=require('../interprete/instrucciones/SelectTable.js');
const SelectAs=require('../interprete/instrucciones/SelectAs.js');
const TruncateTable=require('../interprete/instrucciones/TruncateTable.js');
const SelectWhere=require('../interprete/instrucciones/SelectWhere.js');
const If=require('../interprete/instrucciones/If.js');
const IfElse=require('../interprete/instrucciones/IfElse.js');
const While=require('../interprete/instrucciones/while.js');
const Cast=require('../interprete/instrucciones/Cast.js');
const Condicion=require('../interprete/expresiones/condicion.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*no se hace nada*/
break;
case 1:/*no se hace nada*/
break;
case 2:Lista_Tokens.push(new Token("FECHA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 81;
break;
case 3:Lista_Tokens.push(new Token("VARIABLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 38;
break;
case 4:Lista_Tokens.push(new Token("PARIZQ", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
             return 25
break;
case 5:Lista_Tokens.push(new Token("PARDER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 26
break;
case 6:Lista_Tokens.push(new Token("PYC", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 8
break;
case 7:Lista_Tokens.push(new Token("COMA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 29
break;
case 8:Lista_Tokens.push(new Token("MAS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 83
break;
case 9:Lista_Tokens.push(new Token("MENOS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
              return 84
break;
case 10:  Lista_Tokens.push(new Token("POR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 44
break;
case 11:  Lista_Tokens.push(new Token("DIV", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 85
break;
case 12:  Lista_Tokens.push(new Token("MOD", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 86
break;
case 13:  Lista_Tokens.push(new Token("PRINT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 19
break;
case 14:  Lista_Tokens.push(new Token("TRUE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 79
break;
case 15:  Lista_Tokens.push(new Token("FALSE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 80
break;
case 16:  Lista_Tokens.push(new Token("NULL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 82
break;
case 17:  Lista_Tokens.push(new Token("EQUALS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 89
break;
case 18:  Lista_Tokens.push(new Token("NOTEQUALS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 90
break;
case 19:  Lista_Tokens.push(new Token("MAYORIGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 93
break;
case 20:  Lista_Tokens.push(new Token("MENORIGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 94
break;
case 21:  Lista_Tokens.push(new Token("MAYOR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 91
break;
case 22:  Lista_Tokens.push(new Token("MENOR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 92
break;
case 23:  Lista_Tokens.push(new Token("IGUAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 39
break;
case 24:  Lista_Tokens.push(new Token("NOT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 95
break;
case 25:  Lista_Tokens.push(new Token("OR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 87
break;
case 26:  Lista_Tokens.push(new Token("AND", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 88
break;
case 27:  Lista_Tokens.push(new Token("INT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 67
break;
case 28:  Lista_Tokens.push(new Token("DOUBLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 68
break;
case 29:  Lista_Tokens.push(new Token("DATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 69
break;
case 30:  Lista_Tokens.push(new Token("VARCHAR", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 70
break;
case 31:  Lista_Tokens.push(new Token("BOOLEAN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 71
break;
case 32:  Lista_Tokens.push(new Token("BEGIN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 21
break;
case 33:  Lista_Tokens.push(new Token("END", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 22
break;
case 34:  Lista_Tokens.push(new Token("LOWER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 24
break;
case 35:  Lista_Tokens.push(new Token("DECLARE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 46
break;
case 36:  Lista_Tokens.push(new Token("SET", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 37
break;
case 37:  Lista_Tokens.push(new Token("DEFAULT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 48
break;
case 38:  Lista_Tokens.push(new Token("SELECT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 40
break;
case 39:  Lista_Tokens.push(new Token("UPPER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 27
break;
case 40:  Lista_Tokens.push(new Token("ROUND", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 28
break;
case 41:Lista_Tokens.push(new Token("LEN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 30
break;
case 42:Lista_Tokens.push(new Token("TRUNCATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 31
break;
case 43:Lista_Tokens.push(new Token("TYPEOF", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 32
break;
case 44:Lista_Tokens.push(new Token("CREATE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 49
break;
case 45:Lista_Tokens.push(new Token("TABLE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 50
break;
case 46:Lista_Tokens.push(new Token("ALTER", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 53
break;
case 47:Lista_Tokens.push(new Token("ADD", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 54
break;
case 48:Lista_Tokens.push(new Token("DROP", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 55
break;
case 49:Lista_Tokens.push(new Token("COLUMN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 56
break;
case 50:Lista_Tokens.push(new Token("RENAME", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 57
break;
case 51:Lista_Tokens.push(new Token("TO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 58
break;
case 52:Lista_Tokens.push(new Token("INSERT", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 59
break;
case 53:Lista_Tokens.push(new Token("INTO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 60
break;
case 54:Lista_Tokens.push(new Token("VALUES", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 61
break;
case 55:Lista_Tokens.push(new Token("FROM", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 42
break;
case 56:Lista_Tokens.push(new Token("AS", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 35
break;
case 57:Lista_Tokens.push(new Token("WHERE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 45
break;
case 58:Lista_Tokens.push(new Token("IF", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 63
break;
case 59:Lista_Tokens.push(new Token("THEN", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 64
break;
case 60:Lista_Tokens.push(new Token("ELSE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 65
break;
case 61:Lista_Tokens.push(new Token("WHILE", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 66
break;
case 62:Lista_Tokens.push(new Token("CAST", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 34
break;
case 63:Lista_Tokens.push(new Token("CADENA", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 78; 
break;
case 64: Lista_Tokens.push(new Token("DECIMAL", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 76; 
break;
case 65: Lista_Tokens.push(new Token("ENTERO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                return 77; 
break;
case 66:Lista_Tokens.push(new Token("ID", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 43;
break;
case 67:/* Espacios se ignoran */
break;
case 68:return 5;
break;
case 69: Lista_Errores.push(new Error("Lexico", "Carater no reconocido "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    ConsolaSalida.push('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column)  
break;
}
},
rules: [/^(?:(--.*))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:(("[0-9]{4}-([0][1-9]|[1][0-2])-([0-2][0-9]|[3][0-1])")|('[0-9]{4}-([0][1-9]|[1][0-2])-([0-2][0-9]|[3][0-1])')))/i,/^(?:(@[a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:not\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:LOWER\b)/i,/^(?:DECLARE\b)/i,/^(?:SET\b)/i,/^(?:DEFAULT\b)/i,/^(?:SELECT\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:FROM\b)/i,/^(?:AS\b)/i,/^(?:WHERE\b)/i,/^(?:IF\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:WHILE\b)/i,/^(?:CAST\b)/i,/^(?:(("(\\.|[^\\"])*")|('(\\.|[^\\'])*')))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_√±√ë]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}